#pragma checksum "C:\Users\AdiB\Desktop\Blazor Samples\MoreComplexSample\Sample\MasterDetailCRUD.Client\Pages\Orders.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6de50071f8cdb8e1a92b8a4743f29e246585cf62"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MasterDetailCRUD.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using MasterDetailCRUD.Client;
    using MasterDetailCRUD.Client.Shared;
    using MasterDetailCRUD.Shared;
    using MasterDetailCRUD.Shared.Models;
    using Microsoft.AspNetCore.Blazor.Browser.Interop;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Orders")]
    public class Orders : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 391 "C:\Users\AdiB\Desktop\Blazor Samples\MoreComplexSample\Sample\MasterDetailCRUD.Client\Pages\Orders.cshtml"
            
    OrderMasters[] ordMaster;
    OrderDetails[] ordDetail;


    OrderMasters ordsM = new OrderMasters();
    OrderDetails ordsD = new OrderDetails();

    Boolean showAddMaster = false;
    Boolean showAddDetail = false;

    int showDetailStatus = 0;
    int sortStatus = 0;
    int orderIDs = 0;
    string Imagename = "Images/toggle.png";
    string ImageSortname = "Images/sortAsc.png";

    string Messages = "";

    protected override async Task OnInitAsync()
    {
        ordMaster = await Http.GetJsonAsync<OrderMasters[]>("/api/OrderMasters/");
        ordsD = new OrderDetails();
        ordsM = new OrderMasters();
        Messages = "";
    }

    //to Add New Order Master

    void AddNewOrderMasters()
    {

        ordsM = new OrderMasters();
        ordsM.OrderDate = DateTime.Now;
        showAddMaster = true;
        showAddDetail = false;
        Messages = "";
    }

    //Save New or update Order Master

    protected async Task SaveOrderMasters()
    {
        if (ordsM.OrderNo == 0)

        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/OrderMasters/", ordsM);

        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/OrderMasters/" + ordsM.OrderNo, ordsM);
        }
        ordsM = new OrderMasters();
        ordMaster = await Http.GetJsonAsync<OrderMasters[]>("/api/OrderMasters/");

        Messages = "Order Master Save to Database !";
        showAddMaster = false;

    }




    //Edit Order Master


    protected async Task EditOrderMaster(int OrderNos)
    {
        showAddMaster = true;
        ordsM = await Http.GetJsonAsync<OrderMasters>("/api/OrderMasters/" + Convert.ToInt32(OrderNos));
    }

    //Delete Order Master
    protected async Task DeleteOrderMaster(int OrderNos)
    {
        // ids = studentID.ToString();
        await Http.DeleteAsync("/api/OrderMasters/" + Convert.ToInt32(OrderNos));


        // await Http.DeleteAsync("/api/StudentMasters/Delete/" + Convert.ToInt32(studentID));

        ordMaster = await Http.GetJsonAsync<OrderMasters[]>("/api/OrderMasters/");
        Messages = "Order Master Deleted from Database !";
    }

    //Sorting

    protected async Task StudentSorting(string SortColumn)
    {
        ordMaster = await Http.GetJsonAsync<OrderMasters[]>("/api/OrderMasters/");
        Messages = "";

        if (sortStatus == 1)
        {
            ImageSortname = "Images/sortDec.png";
            sortStatus = 0;

            switch (SortColumn)
            {
                case "OrderNo":
                    ordMaster = ordMaster.OrderBy(x => x.OrderNo).ToArray();
                    break;
                case "TableId":
                    ordMaster = ordMaster.OrderBy(x => x.TableId).ToArray();
                    break;

                case "Description":
                    ordMaster = ordMaster.OrderBy(x => x.Description).ToArray();
                    break;
                case "OrderDate":
                    ordMaster = ordMaster.OrderBy(x => x.OrderDate).ToArray();
                    break;
                case "WaiterName":
                    ordMaster = ordMaster.OrderBy(x => x.WaiterName).ToArray();
                    break;
            }
        }
        else
        {
            ImageSortname = "Images/sortAsc.png";
            sortStatus = 1;

            switch (SortColumn)
            {
                case "OrderNo":
                    ordMaster = ordMaster.OrderByDescending(x => x.OrderNo).ToArray();
                    break;
                case "TableId":
                    ordMaster = ordMaster.OrderByDescending(x => x.TableId).ToArray();
                    break;

                case "Description":
                    ordMaster = ordMaster.OrderByDescending(x => x.Description).ToArray();
                    break;
                case "OrderDate":
                    ordMaster = ordMaster.OrderByDescending(x => x.OrderDate).ToArray();
                    break;
                case "WaiterName":
                    ordMaster = ordMaster.OrderByDescending(x => x.WaiterName).ToArray();
                    break;
            }
        }
    }



    // For Filtering by OrderNo
    void OnOrderNoChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        studentFilteringList(values, "OrderNo");
    }


    // For Filtering by TableId
    void OnTableIdChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        studentFilteringList(values, "TableId");
    }


    // For Filtering by Description
    void OnDescriptionChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        studentFilteringList(values, "Description");
    }


    // For Filtering by OrderDate
    void OnOrderDateChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        studentFilteringList(values, "OrderDate");
    }

    // For Filtering by WaiterName
    void OnWaiterNameChanged(UIChangeEventArgs args)
    {
        string values = args.Value.ToString();
        studentFilteringList(values, "WaiterName");
    }



    //Filtering
    protected async Task studentFilteringList(String Value, string columnName)
    {
        ordMaster = await Http.GetJsonAsync<OrderMasters[]>("/api/OrderMasters/");

        Messages = "";
        if (Value.Trim().Length > 0)
        {

            switch (columnName)
            {

                case "TableId":
                    ordMaster = ordMaster.Where(x => x.TableId.Contains(Value)).ToArray();
                    break;
                case "Description":
                    ordMaster = ordMaster.Where(x => x.Description.Contains(Value)).ToArray();
                    break;
                case "WaiterName":
                    ordMaster = ordMaster.Where(x => x.WaiterName.Contains(Value)).ToArray();
                    break;
            }

        }
        else
        {
            ordMaster = await Http.GetJsonAsync<OrderMasters[]>("/api/OrderMasters/");
        }
    }


    //--------------- Detail Grid CRUD



    protected async Task getOrderDetails(int ordID)
    {
        showAddMaster = false;
        showAddDetail = false;
        Messages = "";
        if (orderIDs != ordID)
        {
            Imagename = "Images/expand.png";
            showDetailStatus = 1;

        }
        else
        {


            if (showDetailStatus == 0)
            {
                Imagename = "Images/expand.png";
                showDetailStatus = 1;
            }
            else
            {
                Imagename = "Images/toggle.png";
                showDetailStatus = 0;
            }

        }
        orderIDs = ordID;
        ordDetail = await Http.GetJsonAsync<OrderDetails[]>("/api/OrderDetails/" + Convert.ToInt32(ordID));

    }
    //to Add New Order Detail


    protected async Task AddNewOrderDetails(int orderMasterNO)
    {
        ordsD = new OrderDetails();

        ordsD.OrderNo = orderMasterNO;
        Messages = "";


        showAddDetail = true;
        showAddMaster = false;

    }

    //Save New or update Order Master

    protected async Task SaveOrderDetails()
    {
        if (ordsD.OrderDetailNo == 0)

        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/OrderDetails/", ordsD);

        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, "/api/OrderDetails/" + ordsD.OrderDetailNo, ordsD);
        }

        ordDetail = await Http.GetJsonAsync<OrderDetails[]>("/api/OrderDetails/" + Convert.ToInt32(ordsD.OrderNo));
        ordsD = new OrderDetails();
        showAddDetail = false;
        showAddMaster = false;
        Messages = "Order Detail Saved to Databse !";
    }




    //Edit Order Master


    protected async Task EditOrderDetails(int OrderDetailNos)
    {

        ordsD = await Http.GetJsonAsync<OrderDetails>("/api/OrderDetails1/" + Convert.ToInt32(OrderDetailNos));
        showAddDetail = true;
        showAddMaster = false;
    }

    //Delete Order Master
    protected async Task DeleteOrderDetails(int OrderDetailNos)
    {
        var ordVale = ordsD.OrderNo;
        // ids = studentID.ToString();
        await Http.DeleteAsync("/api/OrderDetails/" + Convert.ToInt32(OrderDetailNos));

        // await Http.DeleteAsync("/api/StudentMasters/Delete/" + Convert.ToInt32(studentID));

        ordDetail = await Http.GetJsonAsync<OrderDetails[]>("/api/OrderDetails/" + Convert.ToInt32(ordVale));
        Imagename = "Images/toggle.png";
        showDetailStatus = 0;
        Messages = "Order Detail Deleted from Database !";
    }

    void closeMessage()
    {
        Messages = "";
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
